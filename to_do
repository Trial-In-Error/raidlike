new

DISPLAY PRIORITY HIERARCHY
1: floor, door
2: items
3: enemies

PLAYER DIE
    # do terrible things to the play here
    # give the player pity healing here

TUTORIAL LEVEL IMPLEMENTATION
	tutorialize
		wait
		save
		quit
		stances
		healing
		obelisk
		death
	implement
		obelisk
		healing items
		healing hotkey
		death/respawn
		see-through doors
		stances
		wait

RE-DO LOS / DRAW CODE
	memory and items
	performance issues with large LoS!!!
		7 is laggy, 8 is terrible, 9 is godawful
	atypical behavior

MAIN MENU IMPLEMENTATION
	credits screen
	choose god

COLLIDETYPE IMPLEMENTATION
	dict

INPUT PARSING IMPLEMENTATION
	healing item hotkey
	implement o to open, c to close

MESSAGE OBJECT IMPLEMENTATION
	outputBuffer needs to accept message objects
	triggertiles->queue up multiple lines of text
	allows composing red-blue-red one line text

CHINATOWN; 80's; WATER; L.A.

sleeper: #add wake-up description!!!

NOTE: FLOORPLANS MUST INCLUDE A "." GLYPH. IT WILL BE USED BY DEFAULT UNDERNEATH THINGS
TRIGGER TILES PROC WHEN YOU ATTACK INTO THEIR LOCATION

old
IMPORTANT:
* equipment

WALLS: WRAP AROUND SCARINESS
FIX GRID TO NOT ACCEPT NEGATIVE

NEW FEATURES:
* player response generator
	* part of player class
		* allows customizing lines by god!
* level input parser
* cell.drawContents() for drawing multiple things (color backgrounds)
* pad all around the level with blank tiles
	* blank tiles->walls
		* blank tiles are for fooling look input parser
* death screen needs work (any input ends it, so players breeze right through)
	* generalize this code
	* change it to accept space bar
* add output buffer management to level

TWEAKING:
* investigate curses.keypad for ways to change escape key's behavior
* "look" parsing mode
    * needs to enter description mode and cleanly exit it, too
        * shallow look vs. deep look
    * does not support escape to leave
* re-route creatures on 'cannot move; other creatures in way' instead of current mode of waiting(1 quantum)
* diagonal AI pathing
    * ASTAR pathing             
* make 'r'est wait until next quantum with an actor in item
    * make that 'R'est and start differentiating case
* __doc__strings
* test in Windows environment
* develop deep look as a separate input parser
* wall collision error text
* clean up grid / cell / levelManager interactions
* grid.clear() using iterators, not double-for-loop
* memory Draw doesn't support drawing enemies from memory

BUGS:
* escape does not leave "look" context
* going off-map confuses the hell out of the AI?